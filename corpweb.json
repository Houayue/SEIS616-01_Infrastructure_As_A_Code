{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Parameters": {
		"InstanceType": {
			"Description": "This is the Instance Type for the EC2",
			"Type": "String",
			"Default": "t2.micro",
			"AllowedValues": [
				"t2.micro",
				"t2.small"
			],
			"ConstraintDescription": "Must be either t2.micro or t2.small"
		},
		"KeyPair": {
			"Description": "server key-pair name for the EC2 instances.",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
		},
		"YourIp": {
			"Description": "Public Ip in CIDR Notation",
			"Type": "String",
			"Default": "192.168.1.0/0"
		}
	},
	"Resources": {
		"EngineeringVpc": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": "10.0.0.0/18",
				"EnableDnsSupport": true,
				"EnableDnsHostnames": true
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {}
		},
		"VPCGatewayAttachment": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				},
				"VpcId": {
					"Ref": "EngineeringVpc"
				}
			}
		},
		"PublicRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "EngineeringVpc"
				}
			}
		},
		"PublicRoute": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"DestinationCidrBlock": "0.0.0.0/0",
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				},
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			},
			"DependsOn": [
				"InternetGateway"
			]
		},
		"PublicSubnet1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "EngineeringVpc"
				},
				"AvailabilityZone": {
					"Fn::Select": [
						"0",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"CidrBlock": "10.0.0.0/24",
				"MapPublicIpOnLaunch": true
			}
		},
		"PublicSubnet2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "EngineeringVpc"
				},
				"AvailabilityZone": {
					"Fn::Select": [
						"1",
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"CidrBlock": "10.0.1.0/24",
				"MapPublicIpOnLaunch": true
			}
		},
		"web1": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet1"
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"ImageId": "ami-000089c8d02060104",
				"KeyName": {
					"Ref": "KeyPair"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash",
								"yum update -y",
								"yum install -y git httpd php",
								"service httpd start",
								"chkconfig httpd on",
								"aws s3 cp s3://seis665-public/index.php /var/www/html/"
							]
						]
					}
				}
			}
		},
		"web2": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet2"
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"ImageId": "ami-000089c8d02060104",
				"KeyName": {
					"Ref": "KeyPair"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash",
								"yum update -y",
								"yum install -y git httpd php",
								"service httpd start",
								"chkconfig httpd on",
								"aws s3 cp s3://seis665-public/index.php /var/www/html/"
							]
						]
					}
				}
			}
		},
		"WebserversSG": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Security group rules for webserver host.",
				"VpcId": {
					"Ref": "EngineeringVpc"
				},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"CidrIp": {
							"Ref": "YourIp"
						},
						"FromPort": 22,
						"ToPort": 22
					},
					{
						"IpProtocol": "tcp",
						"CidrIp": "0.0.0.0/0",
						"FromPort": 80,
						"ToPort": 80
					}
				]
			}
		},
		"EngineeringWebservers": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"Protocol": "HTTP",
				"Port": 80,
				"VpcId": {
					"Ref": "EngineeringVpc"
				},
				"HealthCheckProtocol": "HTTP",
				"HealthCheckPort": "80",
				"HealthCheckPath": "/",
				"TargetType": "instance",
				"Targets": [
					{
						"Id": {
							"Ref": "web1"
						},
						"Port": 80
					},
					{
						"Id": {
							"Ref": "web2"
						},
						"Port": 80
					}
				]
			}
		},
		"EngineeringLb": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties": {
				"Name": "EngineeringLb",
				"Subnets": [
					{
						"Ref": "PublicSubnet1"
					},
					{
						"Ref": "PublicSubnet2"
					}
				],
				"SecurityGroups": [
					{
						"Ref": "WebserversSG"
					}
				],
				"Scheme": "internet-facing",
				"LoadBalancerAttributes": [
					{
						"Key": "idle_timeout.timeout_seconds",
						"Value": "60"
					}
				]
			}
		},
		"EngineeringLbListener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [
					{
						"Type": "forward",
						"TargetGroupArn": {
							"Ref": "EngineeringWebservers"
						}
					}
				],
				"LoadBalancerArn": {
					"Ref": "EngineeringLb"
				},
				"Port": 80,
				"Protocol": "HTTP"
			}
		}
	},
	"Outputs": {
		"WebUrl": {
			"Description": "Displays Load Balancer DNS Name",
			"Value": {
				"Fn::Join": [
					"",
					[
						"http://",
						{
							"Fn::GetAtt": [
								"EngineeringLb",
								"DNSName"
							]
						}
					]
				]
			}
		}
	}
}